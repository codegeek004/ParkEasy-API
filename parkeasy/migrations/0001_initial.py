# Generated by Django 5.1.4 on 2024-12-15 12:18

import datetime
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BookingSlot',
            fields=[
                ('BSlotID', models.AutoField(primary_key=True, serialize=False)),
                ('SNo', models.BigIntegerField(unique=True)),
                ('Date', models.DateField(blank=True, null=True)),
                ('TimeFrom', models.TimeField(blank=True, null=True)),
                ('TimeTo', models.TimeField(blank=True, null=True)),
                ('duration', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Slots',
            fields=[
                ('SlotID', models.AutoField(primary_key=True, serialize=False)),
                ('space', models.CharField(blank=True, max_length=30, null=True)),
                ('price', models.IntegerField(blank=True, null=True)),
                ('total_slots', models.IntegerField(default=90)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('VehicleID', models.AutoField(primary_key=True, serialize=False)),
                ('SNo', models.BigIntegerField(unique=True)),
                ('VehicleType', models.CharField(blank=True, max_length=40, null=True)),
                ('VehicleNumber', models.CharField(blank=True, max_length=40, null=True)),
                ('VehicleName', models.CharField(blank=True, max_length=40, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('user', 'User')], default='user', max_length=10)),
                ('last_active', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('latest_token', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActiveToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('refresh_token', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('PaymentID', models.AutoField(primary_key=True, serialize=False)),
                ('SNo', models.BigIntegerField(unique=True)),
                ('TotalPrice', models.IntegerField(blank=True, null=True)),
                ('mode', models.CharField(blank=True, max_length=30, null=True)),
                ('BSlotID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parkeasy.bookingslot')),
            ],
        ),
        migrations.AddField(
            model_name='bookingslot',
            name='SlotID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parkeasy.slots'),
        ),
        migrations.AddField(
            model_name='bookingslot',
            name='VehicleID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parkeasy.vehicle'),
        ),
    ]
